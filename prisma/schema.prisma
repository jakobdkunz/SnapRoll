// Datasource
 datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
 }

// Generator
 generator client {
  provider = "prisma-client-js"
 }

model User {
  id        String @id @default(cuid())
  email     String @unique
  firstName String
  lastName  String
  role      Role
  // Relations
  taughtSections     Section[]         @relation("TeacherSections")
  enrollments        Enrollment[]
  attendanceRecords  AttendanceRecord[]
  manualStatusChanges ManualStatusChange[] @relation("TeacherManualChanges")
  studentManualChanges ManualStatusChange[] @relation("StudentManualChanges")
  wordCloudAnswers   WordCloudAnswer[]
}

model Section {
  id        String  @id @default(cuid())
  title     String
  gradient  String? @default("gradient-1")
  teacher   User    @relation("TeacherSections", fields: [teacherId], references: [id])
  teacherId String
  // Relations
  enrollments Enrollment[]
  classDays   ClassDay[]
  wordCloudSessions WordCloudSession[]
}

model Enrollment {
  id        String @id @default(cuid())
  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String
  student   User    @relation(fields: [studentId], references: [id])
  studentId String
  // Unique per section/student
  @@unique([sectionId, studentId])
}

model ClassDay {
  id             String  @id @default(cuid())
  section        Section @relation(fields: [sectionId], references: [id])
  sectionId      String
  date           DateTime
  attendanceCode String
  attendanceCodeExpiresAt DateTime?
  // Relations
  attendanceRecords AttendanceRecord[]
  manualStatusChanges ManualStatusChange[]
  @@unique([sectionId, date])
}

model AttendanceRecord {
  id         String   @id @default(cuid())
  classDay   ClassDay @relation(fields: [classDayId], references: [id])
  classDayId String
  student    User     @relation(fields: [studentId], references: [id])
  studentId  String
  status     AttendanceStatus
  @@unique([classDayId, studentId])
}

model ManualStatusChange {
  id         String   @id @default(cuid())
  classDay   ClassDay @relation(fields: [classDayId], references: [id])
  classDayId String
  student    User     @relation("StudentManualChanges", fields: [studentId], references: [id])
  studentId  String
  teacher    User     @relation("TeacherManualChanges", fields: [teacherId], references: [id])
  teacherId  String
  status     AttendanceStatus
  createdAt  DateTime @default(now())
  // Unique per classDay/student (only one manual change per student per day)
  @@unique([classDayId, studentId])
}

enum Role {
  TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
  NOT_JOINED
  BLANK
}

model WordCloudSession {
  id                     String   @id @default(cuid())
  section                Section  @relation(fields: [sectionId], references: [id])
  sectionId              String
  prompt                 String
  showPromptToStudents   Boolean  @default(true)
  allowMultipleAnswers   Boolean  @default(false)
  createdAt              DateTime @default(now())
  closedAt               DateTime?
  instructorLastSeenAt   DateTime?
  // Relations
  answers                WordCloudAnswer[]

  @@index([sectionId])
}

model WordCloudAnswer {
  id         String           @id @default(cuid())
  session    WordCloudSession @relation(fields: [sessionId], references: [id])
  sessionId  String
  student    User             @relation(fields: [studentId], references: [id])
  studentId  String
  text       String
  createdAt  DateTime         @default(now())

  @@index([sessionId])
  @@index([studentId])
  @@unique([sessionId, studentId, text])
}

// Poll models
model PollSession {
  id                   String   @id @default(cuid())
  section              Section  @relation(fields: [sectionId], references: [id])
  sectionId            String
  prompt               String
  optionsJson          String   // JSON.stringify([...options])
  showResults          Boolean  @default(false)
  createdAt            DateTime @default(now())
  closedAt             DateTime?
  instructorLastSeenAt DateTime?
  answers              PollAnswer[]

  @@index([sectionId])
}

model PollAnswer {
  id         String       @id @default(cuid())
  session    PollSession  @relation(fields: [sessionId], references: [id])
  sessionId  String
  student    User         @relation(fields: [studentId], references: [id])
  studentId  String
  optionIdx  Int
  createdAt  DateTime     @default(now())

  @@index([sessionId])
  @@index([studentId])
  @@unique([sessionId, studentId])
}
